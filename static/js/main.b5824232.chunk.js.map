{"version":3,"sources":["components/Game/Button/Button.js","components/Game/Game.config.js","components/Game/Game.util.js","components/Game/Board/Board.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Button","onClick","className","content","props","join","winCombinations","players","name","char","gameStates","inProgress","winner","draw","notStartedYet","getGameStatus","gameBoxes","find","item","filter","Boolean","length","getResultMessage","gameStatus","player","initialState","Game","onButtonClick","boxNumber","onBoxClick","clearBoard","onBoardClear","setState","state","this","isActive","map","index","key","disabled","Component","0","1","activePlayer","isGameInProgress","resultMessage","Array","fill","undefined","updatedBoxes","restartGame","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5824232.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nconst Button = ({ onClick, className, content = '', ...props }) => (\n  <button className={['buttonRoot', className].join(' ')} onClick={onClick} {...props}>\n    {content}\n  </button>\n)\n\nexport default Button;\n","export const winCombinations = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n]\n  \nexport const players = {\n  0: {\n    name: 'Player one',\n    char: 'O',\n  },\n  1: {\n    name: 'Player two',\n    char: 'X',\n  },\n}\n\nexport const gameStates = {\n  inProgress: 'Game is in progress',\n  winner: 'Game is over, we have a winner: ',\n  draw: 'Game is over, we have a draw',\n  notStartedYet: 'Game has not started yet',\n}","import { gameStates, winCombinations, players } from './Game.config';\n\nexport const getGameStatus = (gameBoxes) => {\n  const gameEndCombination = winCombinations.find(item => gameBoxes[item[0]] && gameBoxes[item[0]] === gameBoxes[item[1]] &&  gameBoxes[item[1]] === gameBoxes[item[2]]);\n  if (gameEndCombination) return gameStates.winner;\n  const areAllBoxesFilled = gameBoxes.filter(item => Boolean(item)).length === gameBoxes.length;\n  return areAllBoxesFilled ? gameStates.draw : gameStates.inProgress;\n}\n\nexport const getResultMessage = (gameStatus, player) => {\n  if (gameStatus === gameStates.draw) return gameStates.draw;\n  if (gameStatus === gameStates.winner && player) return `${gameStates.winner} ${players[1].name} (${players[1].char})`;\n  if (gameStatus === gameStates.winner && !player) return `${gameStates.winner} ${players[0].name} (${players[0].char})`;\n  return '';\n}\n","import React, { Component } from 'react';\nimport Button from '../Button';\nimport { gameStates } from '../Game.config';\nimport { getGameStatus } from '../Game.util';\nimport './Board.css';\n\n\nconst initialState = {\n}\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n  \n  render() {\n    const { gameBoxes, isActive } = this.props;\n    return (\n      <div className=\"board\">\n        {gameBoxes.map((item, index) => (\n          <div key={`game-box-${index}`} className=\"board-cell\">\n            <Button onClick={() => this.onButtonClick(index)} content={item} disabled={!isActive || Boolean(item)} />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  onButtonClick = boxNumber => {\n    const { onBoxClick } = this.props;\n    onBoxClick(boxNumber);\n  }\n\n  clearBoard = () => {\n    const { onBoardClear } = this.props;\n    this.setState(initialState);\n    onBoardClear();\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Button from './Button';\nimport Board from './Board';\nimport { getResultMessage, getGameStatus } from './Game.util';\nimport './Game.css';\nimport { gameStates } from './Game.config';\n\nconst winCombinations = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n]\n\nconst players = {\n  0: {\n    name: 'Player one',\n    char: 'O',\n  },\n  1: {\n    name: 'Player two',\n    char: 'X',\n  },\n}\n\nconst initialState = {\n  activePlayer: 0,\n  isGameInProgress: false,\n  resultMessage: '',\n  gameBoxes: Array(9).fill(undefined),\n}\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n  \n  render() {\n    const {\n      resultMessage,\n      isGameInProgress,\n      activePlayer,\n      gameBoxes,\n    } = this.state;\n    return (\n      <div className=\"game\">\n        <Board\n          activePlayer={activePlayer}\n          onBoxClick={this.onBoxClick}\n          gameBoxes={gameBoxes}\n          isActive={isGameInProgress}\n        />\n        <div className=\"control-panel\">\n          <Button content={(isGameInProgress || resultMessage) ? 'Reset game' : 'Start game'} onClick={this.restartGame} className=\"button\" />\n          {(isGameInProgress && !resultMessage) && (\n            <div>{`Current turn: ${players[activePlayer].name}(${players[activePlayer].char})`}</div>\n          )}\n          {resultMessage && <div>{resultMessage}</div>}\n        </div>\n      </div>\n    );\n  }\n\n  onBoxClick = boxNumber => {\n    const { gameBoxes, activePlayer } = this.state;\n    const content = players[activePlayer].char;\n    const updatedBoxes = gameBoxes.map((item, index) => index === boxNumber ? content : item);\n    const gameStatus = getGameStatus(updatedBoxes);\n    this.setState({\n      gameBoxes: updatedBoxes,\n      activePlayer: activePlayer ? 0 : 1,\n      resultMessage: getResultMessage(gameStatus, activePlayer),\n      isGameInProgress: gameStatus === gameStates.inProgress,\n    });\n  }\n\n  restartGame = () => {\n    this.setState({ ...initialState, isGameInProgress: true });\n  }\n\n}\n\nexport default Game;\n","import React from 'react';\nimport { Game } from './components'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}